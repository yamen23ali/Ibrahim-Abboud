from numpy.random import seed
seed(1)
import tensorflow
tensorflow.random.set_seed(42)

file = "GEANT2.csv"
with open(file, 'r') as f:
    l = [[(num) for num in line.split(' ')] for line in f if line.strip() != ""]
for i in range(len(l)):
    l[i] = l[i][:-1]

import numpy as np
# create the matrix:
t = np.array(l)
print(t.shape)
print(type(t))

# splitting the data;
random_state = 42
train_size = int(len(t) * 0.95)
test_size = len(t) - train_size

training = t[0:train_size]
testing = t[train_size:len(t)]
training.shape, testing.shape

# Scaling the data (normalization),

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
training = scaler.fit_transform(training)
training.shape

# create window size to predict the next day, where X_train is window size and y_train predicted next day.

window = 5
X_train = []
y_train = []

for i in range(window, training.shape[0]):
    X_train.append(training[i-window:i])
    y_train.append(training[i, 0])
    
X_train, y_train = np.array(X_train), np.array(y_train) 
X_train.shape, y_train.shape 

# build the model
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense, LSTM, Dropout

model = Sequential()
model.add(LSTM(units = 50, activation = 'relu' ,input_shape = (X_train.shape[1], 529)))
model.add(Dropout(0.1))
model.add(Dense(units = 1))
model.summary()

# compile the model
model.compile(optimizer='adam', loss = 'mean_squared_error')
history = model.fit(X_train, y_train, epochs=20, batch_size=4)

# plot the loss function
import matplotlib.pyplot as plt
plt.plot(history.history['loss'], label='train')
plt.legend()

# making prediction on the training data.
my_pred = model.predict(X_train) # my_pred with y_train.# Visualising the results

# plot the training with the prediction over the training set.
import matplotlib.pyplot as plt
plt.figure(figsize=(14,5))
plt.plot(y_train, color = 'yellow', label = 'Real Bandwidth')
plt.plot(my_pred, color = 'black',label = 'Predicted Bandwidth')
plt.title('Bandwidth VS time')
plt.xlabel('Time')
plt.ylabel('Bandwidth')
plt.legend()
plt.show()

# prepare the test data, here we Subtract the window size from last part of the training set to predict the first time step in the data test.
testing_with = t[638:len(t)]
inputs = scaler.transform(testing_with)
inputs.shape[0]

# convert the data to be 3D array.
X_test = [], y_test = []
for i in range(window, inputs.shape[0]):
    X_test.append(inputs[i-window:i])
    y_test.append(inputs[i, 0])
X_test, y_test = np.array(X_test), np.array(y_test)
X_test.shape, y_test.shape

# making prediction over the test data.
y_pred = model.predict(X_test)  # y_pred with y_test
y_pred.shape

# plot the result
plt.figure(figsize=(14,6))
plt.plot(y_test, color = 'red', label = 'Real Bandwidth')
plt.plot(y_pred, color = 'blue', label = 'Predicted Bandwidth')
plt.title('Bandwidth VS time')
plt.xlabel('Time')
plt.ylabel('Bandwidth')
plt.legend()
plt.show()

# calculate the error.
import math
from sklearn.metrics import mean_squared_error
math.sqrt(mean_squared_error(y_train,my_pred))
math.sqrt(mean_squared_error(y_pred,y_test))
